replicaCount: 3

image:
  repository: acs-api
  pullPolicy: IfNotPresent
  tag: ""

serviceAccount:
  create: true
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
securityContext: {}

# Enable development mode
developmentMode: false

server:
  tls:
   issuerRef:
      name: ""
      kind: ClusterIssuer

authentication:
  # Regex patterns to match against the client certificate subject
  authorisedSubjects: [ ]
#    - ".*"
  forwardedHeader: ssl-client-cert
  certificateCache:
    size: 1024
    ttlSeconds: 60

# How frequently to refresh the target/fragment in-memory cache from the database
cacheUpdateIntervalMilliseconds: 10000

dataSource:
  server: "" # mysql-db.example.com
  port: 3306
  user: "" # acs
  passwordSecretRef:
    name: ""
    key: ""
  databaseName: "" # acs

logging:
  console:
    enabled: true
    minimumLogLevel: Information
  http:
    enabled: false
    url: "" # https://logs.example.com/datafeed
    minimumLogLevel: Information # Verbose|Debug|Information|Warning|Error|Fatal
    headers: { }
    #  stroom-feed: ACS-Production-V1.0
    periodSeconds: 10
    batchLimit: 1000
    inMemoryQueueLimitBytes: 10485760
    persistence:
      enabled: true

service:
  type: ClusterIP
  port: 443
  nodePort: ""

# Hostname from which the application will be accessed
publicHostname: api.acs.internal

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/tls-acme: "true"

resources:
  requests:
    cpu: 200m
    memory: 128Mi
  limits:
    cpu: "2"
    memory: 256Mi

nodeSelector: {}
tolerations: []
affinity: {}
